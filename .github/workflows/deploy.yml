name: Deploy MyOwnNews

on:
  # Disabled automatic deployment - using manual SAM deployment instead
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Setup AWS SAM
      uses: aws-actions/setup-sam@v2
      
    - name: Setup AWS credentials manually
      run: |
        mkdir -p ~/.aws
        echo "[default]" > ~/.aws/credentials
        echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
        echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
        echo "[default]" > ~/.aws/config
        echo "region = us-west-2" >> ~/.aws/config
        echo "output = json" >> ~/.aws/config
        
    - name: Build SAM application
      run: sam build --use-container
      
    - name: Deploy SAM application
      id: deploy
      env:
        AWS_DEFAULT_REGION: us-west-2
        AWS_PAGER: ""
      run: |
        sam deploy \
          --stack-name myownnews-${{ github.event.inputs.environment || 'dev' }} \
          --region us-west-2 \
          --parameter-overrides \
            NewsApiKey="${{ secrets.NEWS_API_KEY }}" \
            VoiceProvider="elevenlabs" \
            VoiceId="21m00Tcm4TlvDq8ikWAM" \
            ElevenLabsApiKey="${{ secrets.ELEVENLABS_API_KEY }}" \
          --no-confirm-changeset \
          --capabilities CAPABILITY_IAM
          
        # Get outputs
        FUNCTION_NAME=$(aws cloudformation describe-stacks \
          --stack-name myownnews-${{ github.event.inputs.environment || 'dev' }} \
          --region us-west-2 \
          --query 'Stacks[0].Outputs[?OutputKey==`FunctionName`].OutputValue' \
          --output text \
          --no-cli-pager)
          
        BUCKET_NAME=$(aws cloudformation describe-stacks \
          --stack-name myownnews-${{ github.event.inputs.environment || 'dev' }} \
          --region us-west-2 \
          --query 'Stacks[0].Outputs[?OutputKey==`BucketName`].OutputValue' \
          --output text \
          --no-cli-pager)
          
        # Create function URL if it doesn't exist
        FUNCTION_URL=$(aws lambda get-function-url-config \
          --function-name $FUNCTION_NAME \
          --region us-west-2 \
          --query 'FunctionUrl' \
          --output text \
          --no-cli-pager 2>/dev/null || echo "")
          
        if [ -z "$FUNCTION_URL" ]; then
          FUNCTION_URL=$(aws lambda create-function-url-config \
            --function-name $FUNCTION_NAME \
            --auth-type NONE \
            --region us-west-2 \
            --query 'FunctionUrl' \
            --output text \
            --no-cli-pager)
            
          # Add permission for function URL
          aws lambda add-permission \
            --function-name $FUNCTION_NAME \
            --statement-id FunctionURLAllowPublicAccess \
            --action lambda:InvokeFunctionUrl \
            --principal "*" \
            --function-url-auth-type NONE \
            --region us-west-2 \
            --no-cli-pager || true
        fi
        
        echo "function-url=$FUNCTION_URL" >> $GITHUB_OUTPUT
        echo "bucket-name=$BUCKET_NAME" >> $GITHUB_OUTPUT
        
    - name: Test deployment
      run: |
        echo "ðŸŽ‰ Deployment successful!"
        echo "ðŸ“¡ Function URL: ${{ steps.deploy.outputs.function-url }}"
        echo "ðŸª£ S3 Bucket: ${{ steps.deploy.outputs.bucket-name }}"
        curl -f "${{ steps.deploy.outputs.function-url }}" || echo "Function URL test failed"