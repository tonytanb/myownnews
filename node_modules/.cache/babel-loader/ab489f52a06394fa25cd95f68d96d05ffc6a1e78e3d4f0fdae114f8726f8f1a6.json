{"ast":null,"code":"var _jsxFileName = \"/Users/tonynarvaez/projects/myownnews-agent/myownnews/curio-news-ui/src/components/InteractiveTranscript.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './InteractiveTranscript.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InteractiveTranscript = ({\n  script,\n  wordTimings,\n  audioRef\n}) => {\n  _s();\n  const [currentWordIndex, setCurrentWordIndex] = useState(-1);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const transcriptRef = useRef(null);\n  const wordsRef = useRef([]);\n\n  // Split script into words and create mock timings if none provided\n  const words = script.split(/\\s+/).filter(word => word.length > 0);\n\n  // Generate mock word timings if not provided (for demo purposes)\n  const mockWordTimings = words.map((word, index) => ({\n    word: word.replace(/[^\\w]/g, ''),\n    // Remove punctuation for matching\n    start: index * 0.5,\n    // 0.5 seconds per word\n    end: (index + 1) * 0.5\n  }));\n  const effectiveTimings = wordTimings.length > 0 ? wordTimings : mockWordTimings;\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (!audio) return;\n    const handleTimeUpdate = () => {\n      const currentTime = audio.currentTime;\n\n      // Find the current word based on timing\n      const wordIndex = effectiveTimings.findIndex(timing => currentTime >= timing.start && currentTime <= timing.end);\n      if (wordIndex !== -1 && wordIndex !== currentWordIndex) {\n        setCurrentWordIndex(wordIndex);\n\n        // Auto-scroll to keep highlighted word visible\n        const wordElement = wordsRef.current[wordIndex];\n        if (wordElement && transcriptRef.current) {\n          const transcriptRect = transcriptRef.current.getBoundingClientRect();\n          const wordRect = wordElement.getBoundingClientRect();\n\n          // Check if word is outside visible area\n          if (wordRect.top < transcriptRect.top || wordRect.bottom > transcriptRect.bottom) {\n            wordElement.scrollIntoView({\n              behavior: 'smooth',\n              block: 'center'\n            });\n          }\n        }\n      }\n    };\n    const handlePlay = () => setIsPlaying(true);\n    const handlePause = () => setIsPlaying(false);\n    const handleEnded = () => {\n      setIsPlaying(false);\n      setCurrentWordIndex(-1);\n    };\n    audio.addEventListener('timeupdate', handleTimeUpdate);\n    audio.addEventListener('play', handlePlay);\n    audio.addEventListener('pause', handlePause);\n    audio.addEventListener('ended', handleEnded);\n    return () => {\n      audio.removeEventListener('timeupdate', handleTimeUpdate);\n      audio.removeEventListener('play', handlePlay);\n      audio.removeEventListener('pause', handlePause);\n      audio.removeEventListener('ended', handleEnded);\n    };\n  }, [audioRef, currentWordIndex, effectiveTimings]);\n  const handleWordClick = wordIndex => {\n    const audio = audioRef.current;\n    if (!audio) return;\n    const timing = effectiveTimings[wordIndex];\n    if (timing) {\n      audio.currentTime = timing.start;\n      if (!isPlaying) {\n        audio.play();\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transcript-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDCDD Interactive Transcript\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transcript-instructions\",\n      children: \"Click any word to jump to that point in the audio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: transcriptRef,\n      className: \"transcript-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transcript-text\",\n        children: words.map((word, index) => {\n          var _effectiveTimings$ind;\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            ref: el => wordsRef.current[index] = el,\n            className: `transcript-word ${index === currentWordIndex ? 'highlighted' : ''} ${isPlaying ? 'playable' : ''}`,\n            onClick: () => handleWordClick(index),\n            title: `Jump to ${(_effectiveTimings$ind = effectiveTimings[index]) === null || _effectiveTimings$ind === void 0 ? void 0 : _effectiveTimings$ind.start.toFixed(1)}s`,\n            children: word\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), isPlaying && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playback-indicator\",\n      children: \"\\uD83C\\uDFB5 Playing - words will highlight as they're spoken\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(InteractiveTranscript, \"1xomIhhYQuyAQpVtt/dYnTXmN+s=\");\n_c = InteractiveTranscript;\nexport default InteractiveTranscript;\nvar _c;\n$RefreshReg$(_c, \"InteractiveTranscript\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","InteractiveTranscript","script","wordTimings","audioRef","_s","currentWordIndex","setCurrentWordIndex","isPlaying","setIsPlaying","transcriptRef","wordsRef","words","split","filter","word","length","mockWordTimings","map","index","replace","start","end","effectiveTimings","audio","current","handleTimeUpdate","currentTime","wordIndex","findIndex","timing","wordElement","transcriptRect","getBoundingClientRect","wordRect","top","bottom","scrollIntoView","behavior","block","handlePlay","handlePause","handleEnded","addEventListener","removeEventListener","handleWordClick","play","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_effectiveTimings$ind","el","onClick","title","toFixed","_c","$RefreshReg$"],"sources":["/Users/tonynarvaez/projects/myownnews-agent/myownnews/curio-news-ui/src/components/InteractiveTranscript.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, RefObject } from 'react';\nimport './InteractiveTranscript.css';\n\ninterface WordTiming {\n  word: string;\n  start: number;\n  end: number;\n}\n\ninterface InteractiveTranscriptProps {\n  script: string;\n  wordTimings: WordTiming[];\n  audioRef: RefObject<HTMLAudioElement>;\n}\n\nconst InteractiveTranscript: React.FC<InteractiveTranscriptProps> = ({\n  script,\n  wordTimings,\n  audioRef\n}) => {\n  const [currentWordIndex, setCurrentWordIndex] = useState<number>(-1);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const transcriptRef = useRef<HTMLDivElement>(null);\n  const wordsRef = useRef<(HTMLSpanElement | null)[]>([]);\n\n  // Split script into words and create mock timings if none provided\n  const words = script.split(/\\s+/).filter(word => word.length > 0);\n  \n  // Generate mock word timings if not provided (for demo purposes)\n  const mockWordTimings: WordTiming[] = words.map((word, index) => ({\n    word: word.replace(/[^\\w]/g, ''), // Remove punctuation for matching\n    start: index * 0.5, // 0.5 seconds per word\n    end: (index + 1) * 0.5\n  }));\n\n  const effectiveTimings = wordTimings.length > 0 ? wordTimings : mockWordTimings;\n\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    const handleTimeUpdate = () => {\n      const currentTime = audio.currentTime;\n      \n      // Find the current word based on timing\n      const wordIndex = effectiveTimings.findIndex(timing => \n        currentTime >= timing.start && currentTime <= timing.end\n      );\n      \n      if (wordIndex !== -1 && wordIndex !== currentWordIndex) {\n        setCurrentWordIndex(wordIndex);\n        \n        // Auto-scroll to keep highlighted word visible\n        const wordElement = wordsRef.current[wordIndex];\n        if (wordElement && transcriptRef.current) {\n          const transcriptRect = transcriptRef.current.getBoundingClientRect();\n          const wordRect = wordElement.getBoundingClientRect();\n          \n          // Check if word is outside visible area\n          if (wordRect.top < transcriptRect.top || wordRect.bottom > transcriptRect.bottom) {\n            wordElement.scrollIntoView({\n              behavior: 'smooth',\n              block: 'center'\n            });\n          }\n        }\n      }\n    };\n\n    const handlePlay = () => setIsPlaying(true);\n    const handlePause = () => setIsPlaying(false);\n    const handleEnded = () => {\n      setIsPlaying(false);\n      setCurrentWordIndex(-1);\n    };\n\n    audio.addEventListener('timeupdate', handleTimeUpdate);\n    audio.addEventListener('play', handlePlay);\n    audio.addEventListener('pause', handlePause);\n    audio.addEventListener('ended', handleEnded);\n\n    return () => {\n      audio.removeEventListener('timeupdate', handleTimeUpdate);\n      audio.removeEventListener('play', handlePlay);\n      audio.removeEventListener('pause', handlePause);\n      audio.removeEventListener('ended', handleEnded);\n    };\n  }, [audioRef, currentWordIndex, effectiveTimings]);\n\n  const handleWordClick = (wordIndex: number) => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    const timing = effectiveTimings[wordIndex];\n    if (timing) {\n      audio.currentTime = timing.start;\n      if (!isPlaying) {\n        audio.play();\n      }\n    }\n  };\n\n  return (\n    <div className=\"transcript-section\">\n      <h2>üìù Interactive Transcript</h2>\n      <div className=\"transcript-instructions\">\n        Click any word to jump to that point in the audio\n      </div>\n      \n      <div \n        ref={transcriptRef}\n        className=\"transcript-container\"\n      >\n        <div className=\"transcript-text\">\n          {words.map((word, index) => (\n            <span\n              key={index}\n              ref={el => wordsRef.current[index] = el}\n              className={`transcript-word ${\n                index === currentWordIndex ? 'highlighted' : ''\n              } ${isPlaying ? 'playable' : ''}`}\n              onClick={() => handleWordClick(index)}\n              title={`Jump to ${effectiveTimings[index]?.start.toFixed(1)}s`}\n            >\n              {word}\n            </span>\n          ))}\n        </div>\n      </div>\n      \n      {isPlaying && (\n        <div className=\"playback-indicator\">\n          üéµ Playing - words will highlight as they're spoken\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default InteractiveTranscript;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}